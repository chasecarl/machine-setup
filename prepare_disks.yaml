- name: Prepare the disk(s)
  hosts: pc
  vars:
    partitions:
      - efi
      - swap
      - primary
    efi_end: 256MiB
    swap_start: "{{ efi_end }}"
    primary_partition_name: cryptroot
  tasks:
    - name: Find suitable device
      ansible.builtin.set_fact:
        install_device: /dev/{{
          ansible_facts.devices |
          dict2items |
          community.general.json_query(suitable_device_query) |
          first }}
      vars:
        # dm is device mapper
        suitable_device_query: "[?value.removable == '0' && !contains(key, `loop`) && !contains(key, `dm-`)].key"
      tags:
        - always
    - name: Print suitable device
      ansible.builtin.debug:
        msg: "{{ install_device }}"

    - name: Read device info
      community.general.parted: device="{{ install_device }}" unit=MiB
      register: device_info
    - name: Print device info
      ansible.builtin.debug:
        msg: "{{ device_info }}"

    # TODO: the 'Determine...' tasks are the same as the tasks below - find a way to reuse them
    - name: Determine if the primary partition is already encrypted
      ansible.builtin.shell:
        cmd: blkid "{{ install_device }}{{ partitions | ansible.utils.index_of('eq', 'primary') + 1 }}" | grep crypto_LUKS
      register: is_primary_encrypted
      failed_when: is_primary_encrypted.rc == 2
    - name: Determine if the primary partition is already opened
      ansible.builtin.shell:
        cmd: ls /dev/mapper/{{ primary_partition_name }}
      register: is_primary_opened
      failed_when: false

    - name: Disable device swapping
      ansible.builtin.shell:
        cmd: swapoff "{{ install_device }}{{ partitions | ansible.utils.index_of('eq', 'swap') + 1 }}"
      when: ansible_facts.swaptotal_mb > 0
    - name: Close the encrypted primary partition
      ansible.builtin.shell:
        cmd: cryptsetup luksClose "{{ primary_partition_name }}"
      when: is_primary_opened.rc == 0
    - name: Remove all partitions from disk
      community.general.parted:
        device: "{{ install_device }}"
        number: "{{ item.num }}"
        state: absent
      loop: "{{ device_info.partitions }}"

    - name: Create an efi partition
      community.general.parted:
        device: "{{ install_device }}"
        number: "{{ partitions | ansible.utils.index_of('eq', 'efi') + 1 }}"
        state: present
        fs_type: fat32
        part_end: "{{ efi_end }}"
        flags: [ boot ]

    - name: Create a swap partition
      community.general.parted:
        device: "{{ install_device }}"
        number: "{{ partitions | ansible.utils.index_of('eq', 'swap') + 1 }}"
        state: present
        fs_type: linux-swap
        part_start: "{{ swap_start }}"
        part_end:  "{{ swap_start[:-3] | int + ansible_facts.memtotal_mb}}MiB"

    - name: Print RAM
      ansible.builtin.debug:
        msg: "{{ ansible_facts |
                 community.general.json_query(query) }}"
      vars:
        query: "memtotal_mb"

    - name: Read device info
      community.general.parted: device="{{ install_device }}" unit=MiB
      register: device_info

    - name: Create a new primary partition
      community.general.parted:
        device: "{{ install_device }}"
        number: "{{ partitions | ansible.utils.index_of('eq', 'primary') + 1 }}"
        state: present
        part_start: "{{ device_info.partitions[-1].end | int }}MiB"
        fs_type: btrfs  # it's just a hint


    - name: Format the efi partition
      ansible.builtin.shell:
        cmd: mkfs.fat -F32 "{{ install_device }}{{ partitions | ansible.utils.index_of('eq', 'efi') + 1 }}"
      tags:
        - format

    - name: Format the swap partition
      community.general.filesystem:
        fstype: swap
        dev: "{{ install_device }}{{ partitions | ansible.utils.index_of('eq', 'swap') + 1 }}"
      tags:
        - format

    - name: Enable swapping
      ansible.builtin.shell:
        cmd: swapon "{{ install_device }}{{ partitions | ansible.utils.index_of('eq', 'swap') + 1 }}"
      when: ansible_facts.swaptotal_mb == 0
      tags:
        - format


    - name: Determine if the primary partition is already encrypted
      ansible.builtin.shell:
        cmd: blkid "{{ install_device }}{{ partitions | ansible.utils.index_of('eq', 'primary') + 1 }}" | grep crypto_LUKS
      register: is_primary_encrypted
      failed_when: is_primary_encrypted.rc == 2
      tags:
        - encrypt
    - name: Encrypt the primary partition
      ansible.builtin.shell:
        cmd: cryptsetup luksFormat "{{ install_device }}{{ partitions | ansible.utils.index_of('eq', 'primary') + 1 }}"
        stdin: "{{ disk_encryption_passphrase }}\n{{ disk_encryption_passphrase }}"
      when:
        is_primary_encrypted.rc == 1
      tags:
        - encrypt

    - name: Determine if the primary partition is already opened
      ansible.builtin.shell:
        cmd: ls /dev/mapper/{{ primary_partition_name }}
      register: is_primary_opened
      failed_when: false
      tags:
        - encrypt
    - name: Open the encrypted primary partition
      ansible.builtin.shell:
        cmd: cryptsetup luksOpen "{{ install_device }}{{ partitions | ansible.utils.index_of('eq', 'primary') + 1 }}" "{{ primary_partition_name }}"
        stdin: "{{ disk_encryption_passphrase }}"
      when:
        is_primary_opened.rc == 2
      tags:
        - encrypt


    - name: Format the primary partition
      community.general.filesystem:
        fstype: btrfs
        dev: /dev/mapper/{{ primary_partition_name }}
      tags:
        - format_after_encrypt
